#include <Arduino.h>
#include <Wire.h>            // ไลบรารีสำหรับ I2C communication
#include <Adafruit_GFX.h>    // ไลบรารีกราฟิกสำหรับการแสดงผลบน OLED
#include <Adafruit_SSD1306.h>// ไลบรารีสำหรับ OLED SSD1306
#include <SoftwareSerial.h>  // ไลบรารีสำหรับ Software Serial
#include <OneWire.h>         // ไลบรารีสำหรับการสื่อสาร OneWire
#include <DallasTemperature.h> // ไลบรารีสำหรับเซ็นเซอร์วัดอุณหภูมิ Dallas
#include "FS.h"
#include <WiFi.h>
#include <WebServer.h>
#include <ezButton.h>
#include <SPI.h>

#define SCREEN_WIDTH 128    // กำหนดความกว้างของหน้าจอ OLED
#define SCREEN_HEIGHT 64    // กำหนดความสูงของหน้าจอ OLED
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// กำหนดขา OneWire ที่เชื่อมต่อกับเซ็นเซอร์ Dallas
const int oneWireBus = 4;

// สร้างวัตถุสำหรับการสื่อสาร OneWire และเซ็นเซอร์ Dallas
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire
int state ;
unsigned long lastCount = 0;
#define BUTTON_PIN 13
ezButton button(BUTTON_PIN);

float lastTemperatureC = 25.0; // ค่าเริ่มต้น (สามารถเปลี่ยนได้)
float lastTemperatureF = 90.0; // ค่าเริ่มต้น (สามารถเปลี่ยนได้)

// สร้าง Software Serial สำหรับการสื่อสารผ่าน RX และ TX
HardwareSerial mySerial(2); // ใช้ Serial2 พร้อมระบุ RX = 16, TX = 17

// ตัวแปรเก็บค่าฝุ่น PM1, PM2.5, และ PM10
unsigned int pm1 = 0;
unsigned int pm2_5 = 0;
unsigned int pm10 = 0;

// ตัวแปรสำหรับ Semaphore และ Mutex
SemaphoreHandle_t dataSemaphore;  // Semaphore สำหรับแจ้งว่ามีข้อมูล Sensor ใหม่
SemaphoreHandle_t oledSemaphore;  // Semaphore สำหรับควบคุมการเข้าถึง OLED
SemaphoreHandle_t dataMutex;      // Mutex สำหรับป้องกันการเข้าถึงตัวแปรพร้อมกัน

// ตัวแปรเก็บ Task Handle ของแต่ละ Task
TaskHandle_t sensorTaskHandle;
TaskHandle_t printTaskHandle;
TaskHandle_t oledTaskHandle;

const char* ssid = "Toon";
const char* password = "bananatoon";

WebServer server(8080);

#define LONG_PRESS_TIME  1000
bool isLongDetected = false;
bool isPressing = false;
unsigned long pressedTime  = 0;
int lastState = LOW;  // the previous state from the input pin
int currentState;

const int ledPin1 = 23;
const int ledPin2 = 25;
const int ledPin3 = 26;
int ledState1 = LOW;    // the current state of LE
int ledState2 = LOW;
int ledState3 = LOW;

// Task สำหรับอ่านค่าจากเซ็นเซอร์ PM

// HTML content for the web page
const char* htmlContent = R"rawliteral(
<!DOCTYPE HTML><html>
<html>
<head>
    <title>CPE414-IoT-Air-Quality-Monitoring-System</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        h1 { color: #0F3376; padding: 10px; }
        .data { font-size: 1.5rem; margin: 10px; }
    </style>
</head>
<body>
    <h1>CPE414-IoT-Air-Quality-Monitoring-System</h1>
    <p class="data">PM1: <span id="pm1">Loading...</span> ug/m3</p>
    <p class="data">PM2.5: <span id="pm2_5">Loading...</span> ug/m3</p>
    <p class="data">PM10: <span id="pm10">Loading...</span> ug/m3</p>
    <p class="data">Temperature: <span id="temperatureC">Loading...</span> C 
    
    <script>
        function fetchData() {
            fetch('/data')
            .then(response => response.json())
            .then(data => {
                document.getElementById('pm1').innerText = data.pm1;
                document.getElementById('pm2_5').innerText = data.pm2_5;
                document.getElementById('pm10').innerText = data.pm10;
                document.getElementById('temperatureC').innerText = data.temperatureC;
                
            })
            .catch(error => console.error('Error fetching data:', error));
        }
        setInterval(fetchData, 500);
        fetchData();
    </script>
</body>
</html>
)rawliteral";

// Function to handle the root path
void handleRoot() {
  server.send(200, "text/html", htmlContent);
}

void handleSensorData() {
    sensors.requestTemperatures(); // ขอค่าล่าสุดจากเซ็นเซอร์
    float temperatureC = sensors.getTempCByIndex(0);
    float temperatureF = sensors.getTempFByIndex(0);

    if (temperatureC == DEVICE_DISCONNECTED_C) {
        temperatureC = lastTemperatureC;
    } else {
        lastTemperatureC = temperatureC; // อัปเดตค่าล่าสุด
    }

    if (temperatureF == DEVICE_DISCONNECTED_F) {
        temperatureF = lastTemperatureF;
    } else {
        lastTemperatureF = temperatureF; // อัปเดตค่าล่าสุด
    }

    String json = "{";
    json += "\"pm1\": " + String(pm1) + ",";
    json += "\"pm2_5\": " + String(pm2_5) + ",";
    json += "\"pm10\": " + String(pm10) + ",";
    json += "\"temperatureC\": " + String(lastTemperatureC) + ",";
    json += "\"temperatureF\": " + String(lastTemperatureF);
    json += "}";
    Serial.println("Sending JSON: " + json);
    server.send(200, "application/json", json);
}

const uint8_t myBitmapT[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xbe, 0x7f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0x9e, 0x7f, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0x9e, 0x61, 0x86, 0xf7, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xad, 0x6d, 0xba, 0xe7, 0xff, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xad, 0x40, 0xba, 0xe7, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xab, 0x4f, 0xba, 0xe7, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xb3, 0x6d, 0xbb, 0x67, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xb7, 0x61, 0xbb, 0x0f, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x18, 0x01, 0x80, 0x00, 0x00, 0x08, 0x3e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x09, 0x43, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x0e, 0x7b, 0x1e, 0x06, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x11, 0x64, 0x92, 0x00, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x01, 0x13, 0x44, 0x91, 0x00, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x10, 0x44, 0x91, 0x00, 0x41, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x11, 0x44, 0x92, 0x00, 0x63, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x0e, 0x44, 0x9e, 0x00, 0x3e, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x07, 0x80, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x1c, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x38, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x8c, 0xc1, 0x07, 0xc1, 0x80, 0x00, 
0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x84, 0xc3, 0x04, 0x21, 0x00, 0x00, 
0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x86, 0xc3, 0x04, 0x61, 0xf0, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x84, 0xa5, 0x00, 0x41, 0x18, 0x00, 
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xf8, 0xa5, 0x01, 0x80, 0x08, 0x00, 
0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x80, 0x99, 0x02, 0x01, 0x08, 0x00, 
0x00, 0x0d, 0x80, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x80, 0x99, 0x04, 0x01, 0x18, 0x00, 
0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x80, 0x99, 0x07, 0xe8, 0xf0, 0x00, 
0x00, 0x1f, 0xce, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x02, 0x7f, 0xff, 0x38, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xc0, 0x00, 0x00, 0x1b, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x70, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x78, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x3c, 0x00, 0x0f, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0x00, 0x0f, 0xff, 0xff, 0xfd, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t myBitmapT1[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3c, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3e, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3e, 0xc4, 0x08, 0xd4, 0x44, 0xb4, 0x8f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3e, 0x85, 0x6b, 0x55, 0xe5, 0xb5, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3e, 0xbd, 0x6b, 0x55, 0xb5, 0xb5, 0x7f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3e, 0xcd, 0x68, 0xc5, 0xc4, 0x85, 0x8e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x04, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x07, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x0c, 0x73, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x18, 0xf9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x1a, 0x1c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x12, 0x3e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x34, 0x7e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x34, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x34, 0xfe, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x37, 0xfe, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x13, 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x19, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x0c, 0xf1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t myBitmapP[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xbe, 0x7f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0x9e, 0x7f, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0x9e, 0x61, 0x86, 0xf7, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xad, 0x6d, 0xba, 0xe7, 0xff, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xad, 0x40, 0xba, 0xe7, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xab, 0x4f, 0xba, 0xe7, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xb3, 0x6d, 0xbb, 0x67, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0e, 0xff, 0xb7, 0x61, 0xbb, 0x0f, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x08, 0x3e, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x43, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x7b, 0x1e, 0x06, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x64, 0x92, 0x00, 0x40, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x44, 0x91, 0x00, 0x40, 0x00, 
0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x44, 0x91, 0x00, 0x41, 0x00, 
0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x44, 0x92, 0x00, 0x63, 0x00, 
0x00, 0x00, 0xf8, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x44, 0x9e, 0x00, 0x3e, 0x00, 
0x00, 0x01, 0xf8, 0x07, 0xfb, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x1c, 0xf8, 0xef, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x1c, 0x70, 0xef, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1c, 0x00, 0xff, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xbf, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xff, 0xfb, 0xf0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3c, 0x01, 0xff, 0xfd, 0xe0, 0x00, 0x00, 0x03, 0x00, 0x8c, 0xc1, 0x07, 0xc1, 0x80, 0x00, 
0x00, 0x3e, 0xfb, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0x80, 0x84, 0xc3, 0x04, 0x21, 0x00, 0x00, 
0x00, 0x7e, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xc0, 0x86, 0xc3, 0x04, 0x61, 0xf0, 0x00, 
0x00, 0x7e, 0xff, 0xff, 0xff, 0xf1, 0x00, 0x01, 0xff, 0xc0, 0x84, 0xa5, 0x00, 0x41, 0x18, 0x00, 
0x00, 0x3e, 0xff, 0xff, 0xff, 0xf3, 0x80, 0x00, 0x00, 0xc0, 0xf8, 0xa5, 0x01, 0x80, 0x08, 0x00, 
0x00, 0x1d, 0xff, 0xff, 0xff, 0xf3, 0x80, 0x00, 0x01, 0x80, 0x80, 0x99, 0x02, 0x01, 0x08, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xe1, 0x00, 0x00, 0x03, 0x00, 0x80, 0x99, 0x04, 0x01, 0x18, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x02, 0x00, 0x80, 0x99, 0x07, 0xe8, 0xf0, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x07, 0x8c, 0x61, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x06, 0xcc, 0xe1, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x4c, 0xe0, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x06, 0xce, 0xe0, 0x60, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x07, 0x8b, 0xe0, 0x40, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x0b, 0x60, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x09, 0x61, 0xf6, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x08, 0x01, 0xe6, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t myBitmapP1[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xf8, 0xde, 0xf8, 0x7e, 0x3f, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xfb, 0x4e, 0xff, 0x7e, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xfb, 0x54, 0xfe, 0xfe, 0x3f, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xf8, 0xda, 0xfd, 0xff, 0xdf, 0xff, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xfb, 0xde, 0xfb, 0xff, 0xdf, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xfb, 0xde, 0xfb, 0xff, 0xdf, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xfb, 0xde, 0xf8, 0x6e, 0x1f, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xe1, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xcc, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x40, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xc0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x04, 0x3f, 0x8f, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x04, 0x40, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x08, 0x40, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x10, 0x80, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x30, 0x80, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x3d, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x3f, 0x07, 0xe4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x19, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x1d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x1d, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x07, 0x0e, 0x03, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x0f, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x04, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x87, 0xdf, 0x0c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x9c, 0x01, 0xcc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x09, 0x7f, 0xff, 0xf4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x05, 0x40, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x03, 0x40, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x01, 0x70, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x01, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0xfe, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x41, 0xfc, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x3f, 0x8f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x18, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void updateLEDsBasedOnPM() {
    if (pm2_5 > 5) {
        digitalWrite(ledPin1, HIGH);
    } else {
        digitalWrite(ledPin1, LOW);
    }

    if (pm2_5 > 25) {
        digitalWrite(ledPin2, HIGH);
    } else {
        digitalWrite(ledPin2, LOW);
    }

    if (pm2_5 > 30) {
        digitalWrite(ledPin3, HIGH);
    } else {
        digitalWrite(ledPin3, LOW);
    }
}

void readSensorTask(void *parameter)
{
    while (1) // Loop ทำงานตลอดเวลา
    {
        int index = 0;        // ตัวนับตำแหน่งในข้อมูลเซ็นเซอร์
        char value;           // เก็บค่าที่อ่านจากเซ็นเซอร์
        char previousValue;   // เก็บค่าก่อนหน้าเพื่อนำไปคำนวณ
        
        if (xSemaphoreTake(dataMutex, portMAX_DELAY)) // ล็อก Mutex เพื่อป้องกันการเข้าถึงตัวแปรพร้อมกัน
        {
            
            while (mySerial.available()) // ตรวจสอบว่ามีข้อมูลจากเซ็นเซอร์หรือไม่
            {
                
                value = mySerial.read(); // อ่านค่าจากเซ็นเซอร์

                // เก็บค่า PM1, PM2.5, PM10 ตามตำแหน่งใน Data Frame
                if (index == 4 || index == 6 || index == 8 || index == 10 || index == 12 || index == 14)
                {
                    previousValue = value; // เก็บค่าก่อนหน้า
                }
                else if (index == 5)
                {
                    pm1 = 256 * previousValue + value; // คำนวณค่า PM1
                }
                else if (index == 7)
                {
                    pm2_5 = 256 * previousValue + value; // คำนวณค่า PM2.5
                }
                else if (index == 9)
                {
                    pm10 = 256 * previousValue + value; // คำนวณค่า PM10
                }
                index++; // เพิ่มตัวนับ
            }
            while (mySerial.available())
                mySerial.read(); // ล้างข้อมูลที่เหลืออยู่

            xSemaphoreGive(dataMutex); // ปลดล็อก Mutex
        }

        xSemaphoreGive(dataSemaphore); // แจ้ง Task อื่นว่ามีข้อมูลใหม่พร้อมใช้งาน
        
        vTaskDelay(pdMS_TO_TICKS(1000)); // หน่วงเวลา 1 วินาที
    }
}

// Task สำหรับพิมพ์ค่าที่อ่านได้
void printTask(void *parameter)
{
    while (1)
    {
        if (xSemaphoreTake(dataSemaphore, portMAX_DELAY)) // รอจนกว่าข้อมูลใหม่พร้อม
        {
            
            sensors.requestTemperatures();
            float temperatureC = sensors.getTempCByIndex(0);

            if (temperatureC == DEVICE_DISCONNECTED_C) {
                temperatureC = lastTemperatureC;
            } 
            else {
                lastTemperatureC = temperatureC; // อัปเดตค่าล่าสุด
            }
            if (xSemaphoreTake(dataMutex, portMAX_DELAY)) // ล็อก Mutex เพื่อเข้าถึงตัวแปร
            {
                
                // แสดงข้อมูล PM และอุณหภูมิใน Serial Monitor
                Serial.print("{ ");
                Serial.print("\"pm1\": ");
                Serial.print(pm1);
                Serial.print(" ug/m3, ");
                Serial.print("\"pm2_5\": ");
                Serial.print(pm2_5);
                Serial.print(" ug/m3, ");
                Serial.print("\"pm10\": ");
                Serial.print(pm10);
                Serial.println(" ug/m3 }");
                Serial.print("Temp C : ");
                Serial.print(temperatureC);
                Serial.println("ºC");

                xSemaphoreGive(dataMutex); // ปลดล็อก Mutex
            }
            
        }
        
        vTaskDelay(pdMS_TO_TICKS(500)); // หน่วงเวลา 1 วินาที
    }
}

// Task สำหรับแสดงค่าบน OLED
void oledshow(void *parameter)
{
    while (1)
    {
        
        if (xSemaphoreTake(oledSemaphore, portMAX_DELAY)) // ล็อกการเข้าถึง OLED
        {
            
                sensors.requestTemperatures();
                float temperatureC = sensors.getTempCByIndex(0);

                if (temperatureC == DEVICE_DISCONNECTED_C) {
                    temperatureC = lastTemperatureC;
                } 
                else {
                    lastTemperatureC = temperatureC; // อัปเดตค่าล่าสุด
                }

            if (xSemaphoreTake(dataMutex, portMAX_DELAY)) // ล็อก Mutex เพื่อป้องกันการเข้าถึงพร้อมกัน
            {
                
               if (state == 0 ) {
                oled.clearDisplay();
                //Serial.print("55555");
                oled.drawBitmap(0, 0, myBitmapT, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
                oled.setTextSize(1);
                oled.setTextColor(WHITE);
                oled.setCursor(80, 40);
               }
                else if (state == 1 )             
                {
                  oled.clearDisplay();  
                  //Serial.print("6666");  
                  oled.drawBitmap(0, 0, myBitmapP, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
                  oled.setTextSize(1);
                  oled.setTextColor(WHITE);
                  oled.setCursor(80, 40);
                }
                else if (state == 10 )             
                {
                 oled.clearDisplay();
                 oled.drawBitmap(0, 0, myBitmapT1, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
                 oled.setTextSize(1);
                 oled.setTextColor(WHITE);
                 oled.setCursor(70, 30);
                 oled.println(temperatureC);
                 oled.setCursor(100, 30);
                 oled.println("C");
                }
                else if (state == 11 )             
                {
                 oled.clearDisplay();
                 oled.drawBitmap(0, 0, myBitmapP1, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
                 oled.setTextSize(1);
                 oled.setTextColor(WHITE);
                 oled.setCursor(70, 30);
                 oled.println(pm2_5);
                 oled.setCursor(85, 30);
                 oled.println("ug/m3");
                }
                oled.display();

                xSemaphoreGive(dataMutex); // ปลดล็อก Mutex
            }}

            xSemaphoreGive(oledSemaphore); // ปลดล็อก OLED
        }
        
        vTaskDelay(pdMS_TO_TICKS(500)); // หน่วงเวลา 2 วินาที
    }

void setup()
{
    Serial.begin(115200); // เริ่ม Serial Monitor
    mySerial.begin(9600, SERIAL_8N1, 16, 17); // เริ่ม Software Serial
    sensors.begin();
    if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) // เริ่ม OLED
    {
        Serial.println(F("SSD1306 allocation failed")); // แจ้งข้อผิดพลาด
        while (1);
    }

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nWiFi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    server.begin();
    Serial.println("Web server started!");

    server.on("/", handleRoot);
    server.on("/data", handleSensorData);

    button.setDebounceTime(50); // set debounce time to 50 milliseconds
    button.setCountMode(COUNT_FALLING);

    pinMode(ledPin1, OUTPUT);
    digitalWrite(ledPin1, LOW);
    pinMode(ledPin2, OUTPUT);
    digitalWrite(ledPin2, LOW);
    pinMode(ledPin3, OUTPUT);
    digitalWrite(ledPin3, LOW);

     if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER)
    {
        Serial.println("Woke up from deep sleep!");
    }
        // สร้าง Semaphore และ Mutex
    dataSemaphore = xSemaphoreCreateBinary();
    oledSemaphore = xSemaphoreCreateBinary();
    dataMutex = xSemaphoreCreateMutex();
    xSemaphoreGive(oledSemaphore); // ให้สิทธิ์การใช้งาน OLED เริ่มต้น

    // สร้าง Task สำหรับ RTOS
    xTaskCreatePinnedToCore(readSensorTask, "Read Sensor", 2048, NULL, 1, &sensorTaskHandle, 1);
    xTaskCreatePinnedToCore(printTask, "Print Data", 2048, NULL, 1, &printTaskHandle, 1);
    xTaskCreatePinnedToCore(oledshow, "Oled show", 2048, NULL, 1, &oledTaskHandle, 1);

    /*esp_sleep_enable_timer_wakeup(10 * 1000000); // 10 วินาที
    Serial.println("Entering deep sleep...");
    vTaskDelay(pdMS_TO_TICKS(500000000)); // รอให้ Serial แสดงผลก่อน5000
    esp_deep_sleep_start(); // เข้าสู่ Deep Sleep*/

}

void loop()
{
    updateLEDsBasedOnPM();
    button.loop();
     if (button.isPressed() and state == 0) 
    {
        state = 1;
    }
     else if (button.isPressed() and state == 1)
     {
        state = 0;
     }

unsigned long count = button.getCount();
     if (lastCount != count) {
    Serial.println(count);  
    lastCount != count;
  }
  
  currentState = digitalRead(BUTTON_PIN);//11
    if (lastState == HIGH && currentState == LOW) {
        pressedTime = millis();
        isPressing = true;
        isLongDetected = false;
    } else if (lastState == LOW && currentState == HIGH) {
        isPressing = false;
    }


    if (isPressing && !isLongDetected) {
        long pressDuration = millis() - pressedTime;
        Serial.println(pressDuration);
        if (pressDuration > LONG_PRESS_TIME) {
            Serial.println("A Long press is detected");
            isLongDetected = true;
            if(state == 1)
            {
                state = 11 ;
            }
            else if (state == 0)
            {
                state = 10 ;
            }
            else
            {
                state =0 ;
            }
            button.resetCount();
            lastCount = 0;        
        }
    }

    lastState = currentState;

    server.handleClient();
    //delay(10);
}
